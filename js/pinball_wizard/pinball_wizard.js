// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  define(function() {
    var activate, add, deactivate, debug, exports, features, get, isActive, push, reset, showLog, state, subscribe, subscribers, urlPrefix, _buildSubscriber, _log, _notifySubscriberOnActivate, _notifySubscribersOnActivate, _notifySubscribersOnDeactivate, _shouldActivate, _urlMatches;
    features = {};
    subscribers = {};
    urlPrefix = 'pinball_';
    showLog = false;
    _log = function(message, args, prefix) {
      if (args == null) {
        args = {};
      }
      if (prefix == null) {
        prefix = '[pinball.js]';
      }
      if (showLog && window.console && window.console.log) {
        console.log("" + prefix + " " + message, args);
      }
    };
    _notifySubscribersOnActivate = function(name) {
      var subscriber, _i, _len, _ref, _results;
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      _ref = subscribers[name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        _results.push(_notifySubscriberOnActivate(subscriber, name));
      }
      return _results;
    };
    _notifySubscriberOnActivate = function(subscriber, name) {
      _log('Notify subscriber that %O is activate', name);
      return subscriber.onActivate();
    };
    _notifySubscribersOnDeactivate = function(name) {
      var subscriber, _i, _len, _ref, _results;
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      _ref = subscribers[name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        _results.push(subscriber.onDeactivate());
      }
      return _results;
    };
    _urlMatches = function(name) {
      return window.location.search.indexOf("" + urlPrefix + name) !== -1;
    };
    _shouldActivate = function(name) {
      return isActive(name) || _urlMatches(name);
    };
    add = function(list) {
      var name, state, _results;
      _results = [];
      for (name in list) {
        state = list[name];
        features[name] = state;
        _log("Added feature " + name + ": " + state);
        if (_shouldActivate(name)) {
          _results.push(activate(name));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    get = function(name) {
      return features[name];
    };
    activate = function(name) {
      var feature;
      feature = get(name);
      if ((feature != null) === false) {
        return _log("Attempted to activate " + name + ", but it was not found.");
      } else if (feature != null ? feature.available : void 0) {
        if (feature.active) {
          return _log("Attempted to activate " + name + ", but it is already active. %O", feature);
        } else {
          _log("Activate feature " + name + ". %O", feature);
          feature.active = true;
          return _notifySubscribersOnActivate(name);
        }
      } else {
        return _log("Attempted to activate " + name + ", but it is not available. %O", feature);
      }
    };
    deactivate = function(name) {
      var feature;
      feature = get(name);
      if ((feature != null) === false) {
        return _log("Attempted to deactivate " + name + ", but it was not found.");
      } else if (feature != null ? feature.active : void 0) {
        _log("Dectivate feature " + name + ". %O", feature);
        feature.active = false;
        return _notifySubscribersOnDeactivate(name);
      } else {
        return _log("Attempted to deactivate " + name + ", but it was already inactive. %O", feature);
      }
    };
    isActive = function(name) {
      return get(name) === 'active';
    };
    _buildSubscriber = function(onActivate, onDeactivate) {
      return {
        onActivate: onActivate != null ? onActivate : function() {},
        onDeactivate: onDeactivate != null ? onDeactivate : function() {}
      };
    };
    subscribe = function(name, onActivate, onDeactivate) {
      var subscriber;
      _log('Added subscriber to %O', name);
      subscriber = _buildSubscriber(onActivate, onDeactivate);
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      subscribers[name].push(subscriber);
      if (isActive(name)) {
        return _notifySubscriberOnActivate(subscriber, name);
      }
    };
    push = function(params) {
      var method;
      method = params.shift();
      return this[method].apply(this, params);
    };
    state = function() {
      return features;
    };
    reset = function() {
      return features = {};
    };
    debug = function() {
      return showLog = true;
    };
    exports = {
      add: add,
      get: get,
      activate: activate,
      deactivate: deactivate,
      isActive: isActive,
      subscribe: subscribe,
      push: push,
      state: state,
      reset: reset,
      debug: debug
    };
    if (typeof window !== "undefined" && window !== null ? window.pinball : void 0) {
      while (window.pinball.length) {
        exports.push(window.pinball.shift());
      }
      window.pinball = exports;
    }
    return exports;
  });

}).call(this);

//# sourceMappingURL=pinball_wizard.map
