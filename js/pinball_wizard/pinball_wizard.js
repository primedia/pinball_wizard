// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var __slice = [].slice;

  define(function() {
    var activate, add, deactivate, debug, exports, features, get, isActive, logPrefix, push, reset, showLog, state, subscribe, subscribers, update, urlPrefix, _buildSubscriber, _log, _notifySubscriberOnActivate, _notifySubscribersOnActivate, _notifySubscribersOnDeactivate, _shouldActivate, _urlMatches;
    features = {};
    subscribers = {};
    urlPrefix = 'pinball_';
    showLog = false;
    logPrefix = '[PinballWizard]';
    _log = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (showLog && window.console && window.console.log) {
        console.log.apply(console, ["" + logPrefix + " " + message].concat(__slice.call(args)));
      }
    };
    _notifySubscribersOnActivate = function(name) {
      var subscriber, _i, _len, _ref, _results;
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      _ref = subscribers[name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        _results.push(_notifySubscriberOnActivate(subscriber, name));
      }
      return _results;
    };
    _notifySubscriberOnActivate = function(subscriber, name) {
      _log('Notify subscriber that %s is activate', name);
      return subscriber.onActivate();
    };
    _notifySubscribersOnDeactivate = function(name) {
      var subscriber, _i, _len, _ref, _results;
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      _ref = subscribers[name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        _results.push(subscriber.onDeactivate());
      }
      return _results;
    };
    _urlMatches = function(name) {
      return window.location.search.indexOf("" + urlPrefix + name) !== -1;
    };
    _shouldActivate = function(name) {
      return isActive(name) || _urlMatches(name);
    };
    add = function(list) {
      var name, state, _results;
      _results = [];
      for (name in list) {
        state = list[name];
        features[name] = state;
        _log("Added %s: %s.", name, state);
        if (_shouldActivate(name)) {
          _results.push(activate(name));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    get = function(name) {
      return features[name];
    };
    update = function(name, state) {
      return features[name] = state;
    };
    activate = function(name) {
      var state;
      state = get(name);
      switch (state) {
        case void 0:
          return _log("Attempted to activate %s, but it was not found.", name);
        case 'inactive':
          _log("Activate %s.", name);
          update(name, 'active');
          return _notifySubscribersOnActivate(name);
        case 'active':
          return _log("Attempted to activate %s, but it is already active.", name);
        default:
          return _log("Attempted to activate %s, but it is %s", name, state);
      }
    };
    deactivate = function(name) {
      var state;
      state = get(name);
      switch (state) {
        case void 0:
          return _log("Attempted to deactivate %s, but it was not found.", name);
        case 'active':
          _log("Dectivate %s.", name);
          update(name, 'inactive');
          return _notifySubscribersOnDeactivate(name);
        default:
          return _log("Attempted to deactivate %s, but it is %s.", name, state);
      }
    };
    isActive = function(name) {
      return get(name) === 'active';
    };
    _buildSubscriber = function(onActivate, onDeactivate) {
      return {
        onActivate: onActivate != null ? onActivate : function() {},
        onDeactivate: onDeactivate != null ? onDeactivate : function() {}
      };
    };
    subscribe = function(name, onActivate, onDeactivate) {
      var subscriber;
      _log('Added subscriber to %s', name);
      subscriber = _buildSubscriber(onActivate, onDeactivate);
      if (subscribers[name] == null) {
        subscribers[name] = [];
      }
      subscribers[name].push(subscriber);
      if (isActive(name)) {
        return _notifySubscriberOnActivate(subscriber, name);
      }
    };
    push = function(params) {
      var method;
      method = params.shift();
      return this[method].apply(this, params);
    };
    state = function() {
      return features;
    };
    reset = function() {
      return features = {};
    };
    debug = function() {
      return showLog = true;
    };
    exports = {
      add: add,
      get: get,
      activate: activate,
      deactivate: deactivate,
      isActive: isActive,
      subscribe: subscribe,
      push: push,
      state: state,
      reset: reset,
      debug: debug
    };
    if (typeof window !== "undefined" && window !== null ? window.pinball : void 0) {
      while (window.pinball.length) {
        exports.push(window.pinball.shift());
      }
      window.pinball = exports;
    }
    return exports;
  });

}).call(this);

//# sourceMappingURL=pinball_wizard.map
